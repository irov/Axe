namespace Axe
{
	exception AdapterAlreadyExistException
	{
		string name;
	};

	exception AdapterNotFoundException
	{
		size_t adapterId;
	};

	exception UniqueAlreadyExistException
	{
		string name;
	};

	exception UniqueNotFoundException
	{
		string name;
	};
		
	typedef map<string, size_t> TMapAdapterIds;
	typedef map<string, Proxy> TMapUniques;
	typedef map<size_t, string> TMapEndpoints;

	class GridManager
	{
		size_t addAdapter( string _name, string _endpoint, out EvictorManager * _evictor ) throws AdapterAlreadyExistException;
		size_t getAdapterId( string _name ) throws AdapterNotFoundException;
		string getAdapterEndpoint( size_t _adapterId ) throws AdapterNotFoundException;

		void addUnique( string _name, Proxy * _unique ) throws UniqueAlreadyExistException;
		Proxy * getUnique( string _name ) throws UniqueNotFoundException;
		
		TMapAdapterIds m_adapterIds;
		
		TMapUniques m_uniques;
		TMapEndpoints m_endpoints;
		
		size_t m_adapterEnumerator;
		size_t m_servantTypeEnumerator;
	};
}